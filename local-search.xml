<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网页设计</title>
    <link href="/2022/05/29/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/05/29/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落，会自动设置段前、段后间距<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span> 水平线<br></code></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">无序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>有序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>定义列表<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><span class="hljs-comment">&lt;!-- 定义标题 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span> <span class="hljs-comment">&lt;!-- 值 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;表格边框线大小，单位是像素&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;x|x% 宽度&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;y|y% 高度&quot;</span> <span class="hljs-attr">cellspacing</span> = <span class="hljs-string">&quot;i 表项间隙&quot;</span> <span class="hljs-attr">cellpadding</span> = <span class="hljs-string">&quot;j 表项内部空白&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span> = <span class="hljs-string">&quot;跨行数&quot;</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;跨列数&quot;</span>&gt;</span>表项<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>为了使得<strong>内容</strong>和<strong>表头</strong>以及<strong>页脚</strong>分开，当滑动内容的时候表头和页脚部分出现在每一页中，提供了以下标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">thaed</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thaed</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>页脚<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>对于表格中的每一列都可以进行单独的设置格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;110&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><ul><li>表单用于用户在网页上输入信息，填写一些资料</li><li>当用户填写好了之后，点击提交按钮，把这些信息发送到服务器进行处理</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单名&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;URL&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get|post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>action: 表单结果发送的服务器的URL<br>method: 表单的发送类型<br>enctype: 发送之前进行什么编码<br>name: 表单的名字<br>target: 那种方式打开URL，属性值可以是_blank,_self,_top<br></code></pre></td></tr></table></figure><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ul><li>用于定义用户的输入字段</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;表项类型&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;元素名&quot;</span> <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">maxlength</span> = <span class="hljs-string">&quot;y&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>不同的type对应于不同的输入框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">text: 单行文本输入框<br>password: 密码框<br>radio: 单选按钮<br>checkbox: 复选框<br>submit: 提交按钮<br>reset: 重置按钮<br>button: 按钮，大部分情况下执行的javascript脚本<br>image: 图片形式的提交按钮，必须使用src属性定义图片的URL<br>file: 选择文件控件，用于上传文件<br>hidden: 隐藏的输入区域，用于定义隐藏的参数<br>color: 让用户从拾色器中选择一个颜色<br>date: 让用户在日期选择器中选择一个日期<br>datetime: 让用户在UTC日期和时间选择器中选择一个日期<br>datetime-local: 让用户从日期时间选择器中选择一个本地的日期和时间<br>time: 时间选择器中选择时间<br>month: 月份选择器中选择月份<br>week: 选择周年<br>email: E-mail地址输入框<br>number: 只能输入数字的框<br>rank: 生成一个拖动条，通过拖动输入一定范围内的数字值<br>search: 输入搜索关键字的文本框<br>tel: 只能输入电话号码的框<br>url: URL的输入框<br></code></pre></td></tr></table></figure><ul><li>属性值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">name: 控件名<br>size: 空间宽度<br>maxlength: 输入字符最大长度<br>checked: 是否预选该元素，用于单选或者多选按钮<br>readonly: 是否只读<br>autofocus: 输入字段的时候在页面加载的时候是否获得焦点<br>disabled: 当页面加载的时候是否禁用<br>value: 元素默认值<br></code></pre></td></tr></table></figure><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><ul><li>用于为其他空间添加说明文字，当点击这个元素的时候，自动将焦点对到label对应的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">lebel</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lebel</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;id&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>其中的id为控件的id</li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><ul><li>下拉列表框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">size</span> = <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;控件名&quot;</span> <span class="hljs-attr">multiple</span> = <span class="hljs-string">&quot;multiple&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>size: 指定下拉列表同时显示选项的个数，在没有被点击之前</li><li>name: 下拉列表名称</li><li>multiple:指定可选择多个选择</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选项值&quot;</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>value为提交给服务器的值，如果没设置默认是option中的内容</li><li>selected指定初始状态是不是被选择</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;选项组说明文字，必须设置&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><ul><li>定义一个按钮</li><li>不同于input中的区别在于，这是一个双标签，它中间的所有元素都属于这个按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>type按钮的类型，可以是submit, reset, button</li></ul><h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><ul><li>定义多行文本输入控件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>placeholder描述文本区提示文本</li><li>required指定这个区域是比填的</li></ul><h1 id="div"><a href="#div" class="headerlink" title="div"></a>div</h1><ul><li>用于管理布局的标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> =<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot; &quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="缩排元素blockquote"><a href="#缩排元素blockquote" class="headerlink" title="缩排元素blockquote"></a>缩排元素blockquote</h1><ul><li>定义一个块引用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>    asdas<br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习</title>
    <link href="/2022/05/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="pyplot"><a href="#pyplot" class="headerlink" title="pyplot"></a>pyplot</h1><ul><li>matplotlib的子库，提供了和matlab类似的绘图API</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><h2 id="plt-figure"><a href="#plt-figure" class="headerlink" title="plt.figure()"></a>plt.figure()</h2><ul><li>功能：生成一个画布</li></ul><p>函数原型</p><p><img src="D:\personal_code_warehouse\学习笔记\深度学习\figure函数原型.png" alt="函数原型"></p><ul><li>num : 窗口的唯一标识号</li><li>figsize: 窗口形状，[4, 4]为长宽为4英寸</li><li>dpi ：分辨率</li><li>facecolor：背景颜色，RGB</li><li>edgecolor：边框颜色</li><li>frameon：是否绘制窗口的图框</li></ul><h2 id="plt-show"><a href="#plt-show" class="headerlink" title="plt.show()"></a>plt.show()</h2><ul><li>功能： 展示画布</li></ul><h2 id="plt-plot"><a href="#plt-plot" class="headerlink" title="plt.plot()"></a>plt.plot()</h2><ul><li>功能：画图</li></ul><p>函数原型</p><p><img src="D:\personal_code_warehouse\学习笔记\深度学习\plot函数原型.png" alt="plot函数原型"></p><ul><li>可以指定绘制曲线的颜色</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x, y, color = <span class="hljs-string">&quot;red&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="plt-legend"><a href="#plt-legend" class="headerlink" title="plt.legend"></a>plt.legend</h2><ul><li>功能：设置图例大小，图例位置，图例等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.legend(label=[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>], loc = <span class="hljs-string">&quot;lower right&quot;</span>, fontsize = <span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure><h2 id="plt-xlabel-plt-ylabel"><a href="#plt-xlabel-plt-ylabel" class="headerlink" title="plt.xlabel, plt.ylabel"></a>plt.xlabel, plt.ylabel</h2><ul><li>功能：设置坐标轴的含义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;y&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="plt-subplot"><a href="#plt-subplot" class="headerlink" title="plt.subplot"></a>plt.subplot</h2><ul><li>功能：创建子图</li></ul><p>函数原型</p><p><img src="D:\personal_code_warehouse\学习笔记\深度学习\subplot原型.png" alt="subplot原型"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br>fig = plt.figure()<br>x = np.linspace(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>y = x * x<br>p1 = plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>p2 = plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>p1.plot(x, y)<br>p2.plot(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br>fig = plt.figure()<br>x = np.linspace(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>y = x * x<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, x)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="plt-tight-layout"><a href="#plt-tight-layout" class="headerlink" title="plt.tight_layout()"></a>plt.tight_layout()</h2><ul><li>自动调整子图参数，使之填充整个图像区域</li></ul><h2 id="plt-title"><a href="#plt-title" class="headerlink" title="plt.title"></a>plt.title</h2><ul><li>设置图像标题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.title(<span class="hljs-string">&quot;figure 1&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="plt-xticks-plt-yticks"><a href="#plt-xticks-plt-yticks" class="headerlink" title="plt.xticks, plt.yticks"></a>plt.xticks, plt.yticks</h2><ul><li>修改坐标轴的命名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.xticks([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强化学习</title>
    <link href="/2022/05/29/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/29/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li><p>深度学习是在<strong>已有</strong>的数据集上，进行训练，进而优化参数</p></li><li><p>强化学习是在<strong>一边探索数据的同时，一边学习模型</strong></p></li><li><p>所以强化学习更符合人类的思维，在很多次的实践中积累经验，也就是摆脱学习时候依赖的数据</p></li><li><p>要素</p><ul><li>代理（Agent）：强化学习的主体，比如bot</li><li>环境（Environment）：Agent所处的世界，能过接受代理的输入，以及给代理反馈，比如斗地主时候的游戏规则</li><li>行为（Action）：Agent对Environment的一次输入，比如斗地主的出一次牌</li><li>状态（State）：Agent在执行某个Action后能观测到的所有信息，对于下棋来说，就是当前棋盘每个棋子的位置</li><li>反馈（Reward）：在某个Action后，Environment给与Agent的奖励<ul><li>正反馈</li><li>负反馈</li></ul></li></ul></li><li><p>强化学习的目的就是，使得Agent具有记忆能力，通过不断向Environment做出Action，并记录收到的反馈，通过这些信息进行学习，然后在之后的Action避免执行获得负反馈的动作</p></li><li><p>策略（Policy）：用于描述在某种State下，Agent如果决定执行何种Action</p><ul><li>在很多的可行Action中挑选出并执行其中一个Action的方法</li></ul></li><li><p>价值（Value）：评估一个State好坏的函数，即V（s），比如当前棋盘状态下赢棋的可能性</p></li><li><p>episode : 由一系列串联的Actions组成，用于描述一次Agent执行的任务</p></li><li><p>step：episode中的一个Action的执行</p></li><li><p>通常每个episode最后获得的Reward被认为是这次episode的真实Value，在训练的时候，这个Value通过某种策略被分配给这个episode上的每一个Status上。</p></li><li><p>所以说在episode中的<strong>中间Reward</strong>是一种局部价值，而只有<strong>最后的Reward</strong>才是需要优化的目标</p></li><li><p>分类</p><ul><li>基于价值</li><li>基于决策</li><li>基于模型</li></ul></li></ul><h1 id="Q-leaning"><a href="#Q-leaning" class="headerlink" title="Q - leaning"></a>Q - leaning</h1><ul><li>基于<strong>价值</strong>的算法</li><li>由于Value才是需要优化的目标，因此如果假设已经知道了所以State的Value，那么只要在当前State中选择能到达<strong>最大Value的State</strong>的Action，就能达到完成任务的最终目的</li><li>算法思想<ul><li>建立出来一个二维表，用来保存在每个State下执行每一个Action能得到的价值</li><li>是函数Q（S，A）的建模</li><li>对于一个Q表，首先进行初始化，然后通过样本数据进行优化Q（S，A）的值</li></ul></li></ul><p><img src="D:\personal_code_warehouse\学习笔记\强化学习\images\Qleaning.png"></p><blockquote><ul><li>上图为更新Q值得公式</li><li>St：当前的State</li><li>At：当前State下做出的一个Action</li><li>α：超参数，这里叫做学习率</li><li>γ：超参数，这里叫做贴现因子</li><li>St+1：从St做出At后得到的State</li><li>maxQ(St + 1, a) ：在St+1下，所有Value的最大值</li><li>α和γ取值范围是[0, 1]</li><li>γ参数决定了最后的Reward对之前所有State价值的传递</li></ul></blockquote><ul><li>在算法中，有一个选择动作的策略，而这个策略可以采用δ-greedy<ul><li>选择一个δ，范围为[0, 1]</li><li>表示有δ这个概率选择最大Q值的Action，其他的概率选择其他动作</li></ul></li></ul><h1 id="Sarsa"><a href="#Sarsa" class="headerlink" title="Sarsa"></a>Sarsa</h1><ul><li>基于<strong>策略</strong>的算法</li><li>是在Q-leaning上的优化</li><li>在Q-learning中对于Q值得优化公式中，maxQ(St + 1, a)使用得方法是不合理得最值法</li><li>Sarsa就是在这里选择的时候使用δ-greedy方法</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2022/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2022/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h1><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul><li>存储程序<ul><li>将程序存储在计算机的存储器中</li></ul></li><li>程序控制<ul><li>通过程序中的指令的地址，来反复进行取址，执行，然后通过译码产生指令需要执行的控制信号，实现对计算机的控制。、</li></ul></li></ul><p><img src="D:\personal_code_warehouse\学习笔记\计算机组成原理\冯诺依曼体系结构.png" alt="冯诺依曼体系结构"></p><blockquote><p>注：</p><ul><li>体系结构由运算器，存储器，控制器，输入设备，输出设备组成。</li><li>其中运算器和控制器属于CPU</li><li>存储器又可分为：外存，内存</li><li>负责各大部件之间传输的线称之为<strong>总线</strong></li><li>总线有<ul><li>地址总线</li><li>控制总线</li><li>数据总线</li></ul></li></ul></blockquote><p><img src="D:\personal_code_warehouse\学习笔记\计算机组成原理\运算器.png" alt="运算器"></p><blockquote><p>主要功能：进行算术以及逻辑运算</p></blockquote><p><img src="D:\personal_code_warehouse\学习笔记\计算机组成原理\控制器.png" alt="控制器"></p><blockquote><ul><li>功能：对指令进行译码，并发出控制信号</li><li>控制信号的形式<ul><li>电平信号</li><li>脉冲信号</li></ul></li><li>产生控制信号的时候，依据的是<ul><li>指令</li><li>时序</li><li>状态</li></ul></li><li>产生控制信号的方式<ul><li>微程序 + 硬布线</li></ul></li></ul></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2022/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><ul><li>不管是C&#x2F;S还是P2P模式，想要使用的话，都是使用对应的<strong>网络应用</strong></li><li>而编写网络应用常用的<strong>API</strong>是<strong>Socket</strong></li><li>开发的应用是针对网络边缘的主机的，而不面向路由器等这些设备</li></ul><p><img src="D:\personal_code_warehouse\学习笔记\计算机网络\不同层接口设计.png"></p><blockquote><ul><li>对于不同层次的设备或者应用，具有不同的<strong>接口</strong>供使用</li><li>应用层和传输层之间的接口，就是Socket</li></ul></blockquote><p><img src="D:\personal_code_warehouse\学习笔记\计算机网络\API.png"></p><blockquote><ul><li>网络的5层结构中，下面4层都是由<strong>操作系统</strong>进行控制，而应用层由应用进程控制</li><li>所以在进行应用层进程通信的时候，需要从应用层跑到操作系统中</li><li>所以在这2者之间需要一个<strong>接口</strong>，这些接口用于应用层和操作系统进行交互</li><li>这个<strong>接口</strong>就是<strong>API（应用程序接口）</strong></li><li>而这些接口，在操作系统中的概念就是<strong>系统调用</strong></li></ul></blockquote><ul><li><p>典型的API</p><ul><li>Berkeley UNIX 操作系统定义了一种API，就是Socket</li><li>微软公司在socket的基础上进行了扩展，叫做WINSOCK</li><li>AT&amp;T为UNIX系统V定义了一种API，简写TLI</li></ul></li><li><p>最初设计</p><ul><li>面向BSD UNIX-Berkley</li><li>面向TCP&#x2F;IP协议栈接口</li></ul></li><li><p>目前</p><ul><li>事实上的工业标准</li><li>绝大数操作系统都支持</li></ul></li><li><p>通信模型</p><ul><li>C&#x2F;S</li></ul></li><li><p>应用进程间通信的抽象机制</p><ul><li>应用进程之间的通信，关于底层的细节被抽象，直接抽象成<strong>客户机进程</strong>到<strong>服务器进程</strong>插了一个接口</li></ul></li></ul><p><img src="D:\personal_code_warehouse\学习笔记\计算机网络\应用进程通信抽象.png"></p><p><img src="D:\personal_code_warehouse\学习笔记\计算机网络\socket抽象.png"></p><blockquote><ul><li>客户机&#x2F;服务器进程需要进程通信的时候，都需要建立一个Socket，利用这个Socket进行通信</li><li>但是一个<strong>服务器</strong>上一般都具有<strong>多个</strong>进程，所以如果只知道服务器的IP，是不能确定与服务器那个进程进行通信的</li><li>所以服务器中的<strong>传输层协议</strong>会为<strong>应用层创建的每一个进程分配一个端口号</strong></li><li>然后服务器上的进程<ul><li><strong>对外</strong><ul><li>IP+端口</li></ul></li><li><strong>对内</strong><ul><li>套接字描述符，每个进程创建套接字的时候，都会生成对应的唯一的<strong>套接字描述符</strong></li></ul></li></ul></li><li>端口号是<strong>16位</strong>的整数，所以端口号的范围是[0, 65535]</li><li>当进程创建自己对应的套接字的时候，其实就是创建一个对自己的抽象</li></ul></blockquote><ul><li>抽象<ul><li>当进程创建一个套接字的时候，<strong>操作系统</strong>会分配一个<strong>数据结构</strong>来存储这个<strong>套接字</strong>相关的信息，然后返回一个<strong>套接字描述符</strong></li></ul></li></ul><p><img src="D:\personal_code_warehouse\学习笔记\计算机网络\socket描述符.png"></p><blockquote><ul><li>然后套接字描述符会在<strong>操作系统</strong>中形成一个<strong>套接字描述符表</strong>，然后每一个套接字描述符对应一个<strong>Socket数据结构</strong></li></ul></blockquote><ul><li>在拥有Socket描述符表之后，就完成了每一个进程的抽象。那么现在就要处理通信时候的进程地址</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统基础</title>
    <link href="/2022/05/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/05/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统启动"><a href="#操作系统启动" class="headerlink" title="操作系统启动"></a>操作系统启动</h1><ul><li>是计算机硬件和应用之间的一层软件（系统软件）<ul><li>方便使用硬件</li><li>高效使用硬件</li></ul></li><li>管理的硬件<ul><li>CPU管理</li><li>内存管理</li><li>终端管理</li><li>磁盘管理</li><li>文件管理</li></ul></li></ul><h1 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h1><ul><li>计算机其实就是一个计算模型</li><li>这个计算模型是图灵提出来的，通过模拟人类在纸上进行数学运算而得来得，被称为图灵机</li><li>通用图灵机<ul><li>在图灵机的基础上加上修改控制器动作的功能</li></ul></li></ul><p><img src="D:\personal_code_warehouse\学习笔记\操作系统\图灵机和通用图灵机.png" alt="图灵机和通用图灵机"></p><ul><li>在通用图灵机中设置控制器动作这个操作，目的是做到了能够让控制器做不同的操作，那么既然要进行不用的操作，那么就必须清楚的给出这个操作应该怎样去执行。所以需要一个东西，使得控制器能够看懂，并且按照这个去执行。</li><li>这个东西，就对应于现在的程序，一个程序其实就是一条一条下达的指令，然后控制器就需要按照这个指令去执行对应的操作。当然程序除了包含指令，它还需要包含指令执行的对象，也就是数据。</li><li>在冯诺依曼体系的主要思想中的存储程序思想，说明了将程序和数据存放到计算机内存中，计算机在程序的控制下进行处理和工作。</li><li>所以计算机的工作，就是通过不停的执行程序，进而深入就是不停的进行（取指，执行）这2个动作。</li></ul><p><img src="D:\personal_code_warehouse\学习笔记\操作系统\冯诺伊曼体系提出的作用.png" alt="冯诺伊曼体系提出的作用.png"></p><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><blockquote><p>CPU组成：</p><ol><li>ALU（算术逻辑单元）: 用于算术或者逻辑运算</li><li>CU（控制器）: 用于取指令，对指令进行译码，并发出一些控制信号</li><li>寄存器：存储CPU在工作的时候中间信息</li><li>中断系统：用于响应设备提出的中断请求</li></ol><p><img src="D:\personal_code_warehouse\学习笔记\操作系统\CPU组成.png" alt="CPU组成"></p><ul><li>控制器内部组成<ul><li>指令计数器(PC) : 用于存储下一条要执行的指令地址</li><li>指令寄存器(IR)  : 用于存储当前正在执行的指令</li><li>指令译码器(ID) : 用于对指令进行“翻译”</li><li>控制电路：根据指令译码器的分析，发出控制信号，完成该指令的所有操作</li></ul></li><li>运算器中由一些算术运算或者逻辑运算的硬件组成，比如加法器等</li><li>寄存器是计算机内部速度最快的存储器，同时容量也非常的小，主要用于存储CPU工作中的一些信息，其中一部分寄存器作用是：<ul><li>IR：存储当前正在执行的指令</li><li>PC（IP 指令指针存储器）：存储下一条指令的地址，是CS中段地址的偏移地址</li><li>CS（代码段寄存器）：在8086中通过CS和IP提供段地址</li></ul></li></ul></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git使用方法</title>
    <link href="/2022/05/29/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/29/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p><img src="D:\Blog\source\images\v2-4f61dac0b425ebe34efc88d11a68f27b_720w.jpg.jpg" alt="Git流程"></p><ul><li><p>Git是一个分布式版本控制系统</p></li><li><p>Remote: 远程仓库，云端的仓库</p></li><li><p>Repository:本地仓库，文件夹中的.git文件，用于保存不同的版本，并且提供一个分支master</p></li><li><p>index：暂存区，是一个用于暂时保存修改的地方</p></li><li><p>workspace: 工作区，文件夹中出了.git文件的其他文件</p></li></ul><h1 id="各种命令"><a href="#各种命令" class="headerlink" title="各种命令"></a>各种命令</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git init <span class="hljs-comment">// 建立本地仓库</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">git config --global user.name <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 设置用户名</span><br>git config --global user.email <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 设置邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git status <span class="hljs-comment">// 查看git状态</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git diff 文件名 <span class="hljs-comment">// 查看某个文件比起上一个版本的修改</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git commit -m <span class="hljs-string">&quot; &quot;</span> <span class="hljs-comment">// 把暂存区的东西上传到本地仓库</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">git log <span class="hljs-comment">// 显示日志，每次git commit 的信息</span><br>git log --pretty=omeline <span class="hljs-comment">// 简洁的显示信息</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">git reset --hard HEAD^ <span class="hljs-comment">// 回退版本,^的个数为回退到之前第几个版本</span><br>git reset --hard HEAD~<span class="hljs-number">12</span> <span class="hljs-comment">// 另一种操作，12代表前第12个版本</span><br>git reset --hard 版本号 <span class="hljs-comment">// 通过版本号进行改变</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cat 文件名 <span class="hljs-comment">// 查看文件内容</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git reflog <span class="hljs-comment">// 获取版本的版本号</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git checkout --文件名 <span class="hljs-comment">// 把这个文件在工作区做的操作撤销掉</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git remote add 名字 http或者ssh <span class="hljs-comment">// 和远程仓库进行链接</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git push 名字 分支 <span class="hljs-comment">// 把本地仓库的修改上传的云端</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git branch <span class="hljs-comment">// 查看当前分支</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git branch 分支名 <span class="hljs-comment">// 建立一个分支</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git checkout 分支名 <span class="hljs-comment">// 切换到这个分支</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git merge 分支 <span class="hljs-comment">// 进行分支合并</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git branch -d 分支 <span class="hljs-comment">// 删除分支</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">git remote <span class="hljs-comment">// 查看远程库信息</span><br>git remote -v <span class="hljs-comment">// 详细信息</span><br>git remote rm 名字 <span class="hljs-comment">// 删除远程仓库</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git push 名字 分支名 <span class="hljs-comment">// 分支推送到远程库</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git pull <span class="hljs-comment">// 把远程库的和本地合并</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">git clone https或者ssh <span class="hljs-comment">// 从云端克隆</span><br></code></pre></td></tr></table></figure><ul><li>git 中粘贴shift + insert</li><li>git 中复制shift + insert</li><li>想拉去其他分支的时候，需要进行链接</li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">git branch --<span class="hljs-built_in">set</span>-upstream <span class="hljs-built_in">dev</span> origin/<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><ul><li>然后再进行</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
